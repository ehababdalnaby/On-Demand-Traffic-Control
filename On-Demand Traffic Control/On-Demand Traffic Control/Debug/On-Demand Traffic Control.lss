
On-Demand Traffic Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000718  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a3  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000676  00000000  00000000  00002389  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000029ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ledInit>:
}
/*********************************************************************************/
EN_pinErro_t ledOff(EN_pinNum_t ledPin)
{
	return DIO_pinWrite(ledPin,Low);
}
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_pinInit>
  72:	08 95       	ret

00000074 <ledToggle>:
/*********************************************************************************/
EN_pinNum_t ledToggle(EN_pinNum_t ledPin)
{
	return DIO_pinToggle(ledPin);
  74:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_pinToggle>
  78:	08 95       	ret

0000007a <main>:
#include "./ECUAL/LED driver/LED.h"
#include <util/delay.h>

int main(void)
{
	ledInit(PA0);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 36 00 	call	0x6c	; 0x6c <ledInit>
	while (1)
	{
		ledToggle(PA0);
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 3a 00 	call	0x74	; 0x74 <ledToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8f e4       	ldi	r24, 0x4F	; 79
  88:	93 ec       	ldi	r25, 0xC3	; 195
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x10>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x16>
  90:	00 00       	nop
  92:	f6 cf       	rjmp	.-20     	; 0x80 <main+0x6>

00000094 <DIO_pinInit>:
	else
	{
		error = WRONG_PIN_NUM;
	}
	return error;
}
  94:	88 30       	cpi	r24, 0x08	; 8
  96:	08 f5       	brcc	.+66     	; 0xda <DIO_pinInit+0x46>
  98:	61 30       	cpi	r22, 0x01	; 1
  9a:	71 f4       	brne	.+28     	; 0xb8 <DIO_pinInit+0x24>
  9c:	4a b3       	in	r20, 0x1a	; 26
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	b9 01       	movw	r22, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_pinInit+0x16>
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_pinInit+0x12>
  ae:	cb 01       	movw	r24, r22
  b0:	84 2b       	or	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
  b8:	61 11       	cpse	r22, r1
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_pinInit+0x11e>
  bc:	4a b3       	in	r20, 0x1a	; 26
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_pinInit+0x36>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_pinInit+0x32>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
  da:	80 31       	cpi	r24, 0x10	; 16
  dc:	10 f5       	brcc	.+68     	; 0x122 <DIO_pinInit+0x8e>
  de:	88 50       	subi	r24, 0x08	; 8
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	71 f4       	brne	.+28     	; 0x100 <DIO_pinInit+0x6c>
  e4:	47 b3       	in	r20, 0x17	; 23
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_pinInit+0x5e>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_pinInit+0x5a>
  f6:	cb 01       	movw	r24, r22
  f8:	84 2b       	or	r24, r20
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
 100:	61 11       	cpse	r22, r1
 102:	59 c0       	rjmp	.+178    	; 0x1b6 <DIO_pinInit+0x122>
 104:	47 b3       	in	r20, 0x17	; 23
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_pinInit+0x7e>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_pinInit+0x7a>
 116:	cb 01       	movw	r24, r22
 118:	80 95       	com	r24
 11a:	84 23       	and	r24, r20
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret
 122:	88 31       	cpi	r24, 0x18	; 24
 124:	10 f5       	brcc	.+68     	; 0x16a <DIO_pinInit+0xd6>
 126:	80 51       	subi	r24, 0x10	; 16
 128:	61 30       	cpi	r22, 0x01	; 1
 12a:	71 f4       	brne	.+28     	; 0x148 <DIO_pinInit+0xb4>
 12c:	44 b3       	in	r20, 0x14	; 20
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_pinInit+0xa6>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_pinInit+0xa2>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	84 bb       	out	0x14, r24	; 20
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	61 11       	cpse	r22, r1
 14a:	37 c0       	rjmp	.+110    	; 0x1ba <DIO_pinInit+0x126>
 14c:	44 b3       	in	r20, 0x14	; 20
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_pinInit+0xc6>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_pinInit+0xc2>
 15e:	cb 01       	movw	r24, r22
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	84 bb       	out	0x14, r24	; 20
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	80 32       	cpi	r24, 0x20	; 32
 16c:	40 f5       	brcc	.+80     	; 0x1be <DIO_pinInit+0x12a>
 16e:	88 51       	subi	r24, 0x18	; 24
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	71 f4       	brne	.+28     	; 0x190 <DIO_pinInit+0xfc>
 174:	41 b3       	in	r20, 0x11	; 17
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_pinInit+0xee>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_pinInit+0xea>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
 190:	61 11       	cpse	r22, r1
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <DIO_pinInit+0x12e>
 194:	41 b3       	in	r20, 0x11	; 17
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_pinInit+0x10e>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_pinInit+0x10a>
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	08 95       	ret
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	08 95       	ret
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	08 95       	ret

000001c6 <DIO_pinToggle>:
/********************************************************************************************************************************************************/
EN_pinErro_t DIO_pinToggle(EN_pinNum_t pinNum)
{
	EN_pinErro_t error = OK;
	//check if the pin is located in port A
	if (pinNum <= PA7)
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	70 f4       	brcc	.+28     	; 0x1e6 <DIO_pinToggle+0x20>
	{
		toggleBit(PORTA,pinNum);
 1ca:	4b b3       	in	r20, 0x1b	; 27
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_pinToggle+0x12>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_pinToggle+0xe>
 1dc:	cb 01       	movw	r24, r22
 1de:	84 27       	eor	r24, r20
 1e0:	8b bb       	out	0x1b, r24	; 27
	return error;
}
/********************************************************************************************************************************************************/
EN_pinErro_t DIO_pinToggle(EN_pinNum_t pinNum)
{
	EN_pinErro_t error = OK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
	if (pinNum <= PA7)
	{
		toggleBit(PORTA,pinNum);
	}
	//check if the pin is located in port B
	else if (pinNum <= PB7)
 1e6:	80 31       	cpi	r24, 0x10	; 16
 1e8:	78 f4       	brcc	.+30     	; 0x208 <DIO_pinToggle+0x42>
	{
		pinNum-=PORTB_OFFSET;
 1ea:	88 50       	subi	r24, 0x08	; 8
		toggleBit(PORTB,pinNum);
 1ec:	48 b3       	in	r20, 0x18	; 24
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_pinToggle+0x34>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_pinToggle+0x30>
 1fe:	cb 01       	movw	r24, r22
 200:	84 27       	eor	r24, r20
 202:	88 bb       	out	0x18, r24	; 24
	return error;
}
/********************************************************************************************************************************************************/
EN_pinErro_t DIO_pinToggle(EN_pinNum_t pinNum)
{
	EN_pinErro_t error = OK;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
	{
		pinNum-=PORTB_OFFSET;
		toggleBit(PORTB,pinNum);
	}
	//check if the pin is located in port C
	else if (pinNum <= PC7)
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	70 f4       	brcc	.+28     	; 0x228 <DIO_pinToggle+0x62>
	{
		toggleBit(PORTC,pinNum);
 20c:	45 b3       	in	r20, 0x15	; 21
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_pinToggle+0x54>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_pinToggle+0x50>
 21e:	cb 01       	movw	r24, r22
 220:	84 27       	eor	r24, r20
 222:	85 bb       	out	0x15, r24	; 21
	return error;
}
/********************************************************************************************************************************************************/
EN_pinErro_t DIO_pinToggle(EN_pinNum_t pinNum)
{
	EN_pinErro_t error = OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
	else if (pinNum <= PC7)
	{
		toggleBit(PORTC,pinNum);
	}
	//check if the pin is located in port D
	else if (pinNum <= PD7)
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	70 f4       	brcc	.+28     	; 0x248 <DIO_pinToggle+0x82>
	{
		toggleBit(PORTD,pinNum);
 22c:	42 b3       	in	r20, 0x12	; 18
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_pinToggle+0x74>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_pinToggle+0x70>
 23e:	cb 01       	movw	r24, r22
 240:	84 27       	eor	r24, r20
 242:	82 bb       	out	0x12, r24	; 18
	return error;
}
/********************************************************************************************************************************************************/
EN_pinErro_t DIO_pinToggle(EN_pinNum_t pinNum)
{
	EN_pinErro_t error = OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
		toggleBit(PORTD,pinNum);
	}
	//if the pinNum is wrong
	else
	{
		error = WRONG_PIN_NUM;
 248:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
